[{"C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\index.js":"1","C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\App.js":"2","C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\reportWebVitals.js":"3","C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\components\\AudioAnalyser\\AudioAnalyser.component.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":1282,"mtime":1611525537195,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":3929,"mtime":1611525366818,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1cdlwbe",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\index.js",[],["20","21"],"C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\App.js",[],"C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\reportWebVitals.js",[],"C:\\Users\\Mateusz\\Desktop\\Github-projects\\reactsoundvisualizer\\src\\components\\AudioAnalyser\\AudioAnalyser.component.jsx",["22"],"// Ten komponent jest odpowiedzialny stricte za analizę przepływu dźwięku przy pomocy WEB AUDIO API i przechowywanie danych z analizy w stanie.\r\n// Pasmo dźwiękowe przekazywane jest do tego komponentu za pomocą props z komponentu rodzica.\r\n\r\n// 1: Gdy komponent zostanie zamontowany  ustawiane są obiekty WEB AUDI API.\r\n\r\nimport {useState, useEffect, useRef} from 'react'\r\n\r\n// import { Component } from 'react'\r\n\r\n// class AudioAnalyser extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = { audioData: new Uint8Array(0) };\r\n//         this.tick = this.tick.bind(this);\r\n//       }\r\n\r\n    \r\n//     tick() {\r\n//         this.analyser.getByteTimeDomainData(this.dataArray);\r\n//         this.setState({ audioData: this.dataArray });\r\n//         this.rafId = requestAnimationFrame(this.tick);\r\n//       }\r\n\r\n//     componentDidMount() {\r\n//         this.audioContext = new (window.AudioContext ||\r\n//           window.webkitAudioContext)();\r\n//         this.analyser = this.audioContext.createAnalyser();\r\n//         this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n//         this.source = this.audioContext.createMediaStreamSource(this.props.audio);\r\n//         this.source.connect(this.analyser);\r\n//         this.rafId = requestAnimationFrame(this.tick);\r\n//       }\r\n\r\n//       componentWillUnmount() {\r\n//         cancelAnimationFrame(this.rafId);\r\n//         this.analyser.disconnect();\r\n//         this.source.disconnect();\r\n//       }\r\n\r\n//       render() {\r\n//         return <textarea value={this.state.audioData} />;\r\n//       }\r\n// }\r\n\r\n// export default AudioAnalyser;\r\n\r\nconst AudioAnalyser = ({audio}) => {\r\n    const [audioData, setAudioData] = useState(new Uint8Array(0))\r\n    let audioContext = useRef();\r\n    let analyser = useRef();\r\n    let dataArray;\r\n    let source = useRef();\r\n    let rafId = useRef();\r\n\r\n    useEffect( () => {\r\n        audioContext.current = new (window.AudioContext || window.webkitAudioContext)(); // tworzymy nowy audioContext. Safari obłsługuje tylko wersję z webkitem...\r\n        analyser.current = audioContext.current.createAnalyser();\r\n        dataArray = new Uint8Array(analyser.current.frequencyBinCount);\r\n        source.current = audioContext.current.createMediaStreamSource(audio)\r\n        source.current.connect(analyser.current)\r\n        rafId.current = requestAnimationFrame(tick);\r\n        console.log('effectss')\r\n\r\n        return () => {\r\n            cancelAnimationFrame(rafId.current)\r\n            analyser.current.disconnect();\r\n            source.current.disconnect();\r\n        }\r\n    }, [audio])\r\n    \r\n    const tick = () => {\r\n        console.log('tick')\r\n        analyser.current.getByteTimeDomainData(dataArray);\r\n        setAudioData(dataArray)\r\n        requestAnimationFrame(tick)\r\n    }\r\n\r\n    return (\r\n        <textarea value={audioData} />\r\n    )\r\n}\r\n\r\nexport default AudioAnalyser\r\n\r\n\r\n// const AudioAnalyser = ({audio}) => {\r\n//     console.log(audio)\r\n//     const [audioData, setAudioData] = useState()\r\n\r\n//     const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n//     const analyser = audioContext.createAnalyser();\r\n//     let dataArray;\r\n//     const source = audioContext.createMediaStreamSource(audio)\r\n\r\n//     const tick = () => {\r\n//         console.log('im called')\r\n//         analyser.getByteTimeDomainData(dataArray)\r\n//         setAudioData(dataArray)\r\n//         console.log(dataArray)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         source.connect(analyser)\r\n//         dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n//         const rafId = requestAnimationFrame(tick)\r\n\r\n//         return () => {\r\n//             analyser.disconnect();\r\n//             source.disconnect();\r\n//         }\r\n//     },[])\r\n\r\n//     return (\r\n//         <textarea value={audioData} />\r\n//     )\r\n// }\r\n\r\n// export default AudioAnalyser",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":58,"column":21,"nodeType":"29","endLine":58,"endColumn":71},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"react-hooks/exhaustive-deps","Assignments to the 'dataArray' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-global-assign","no-unsafe-negation"]